${packageName};

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.hll.concert.common.BaseResp;
import com.hll.concert.common.MyException;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
* @author yuechao 2018/4/29
*/
@Service
@Transactional
public class ${className}Service {

@Autowired
private ${className}Dao ${entityName}Dao;


public BaseResp add${className}(${className}AddRequest request) {
${className}Entity entity = new ${className}Entity();
BeanUtils.copyProperties(request, entity);
int result = this.${entityName}Dao.add${className}(entity);
if (result < 0) {
throw new MyException("新增失败");
}
return new BaseResp();
}

public BaseResp update${className}(${className}UpdateRequest request) {
${className}Entity entity = new ${className}Entity();
BeanUtils.copyProperties(request, entity);
int result = this.${entityName}Dao.update${className}(entity);
if (result < 0) {
throw new MyException("更新失败");
}
return new BaseResp();
}

public BaseResp delete${className}ById(${className}DeleteRequest request) {
${className}Entity entity = new ${className}Entity();
BeanUtils.copyProperties(request, entity);
int result = this.${entityName}Dao.delete${className}ById(entity);
if (result < 0) {
throw new MyException("删除失败");
}
return new BaseResp();
}


public ${className}OnlyResp find${className}ById(${className}FindByIdRequest request) {
${className}Entity entity = new ${className}Entity();
BeanUtils.copyProperties(request, entity);
${className}Entity oEn = this.${entityName}Dao.find${className}ById(entity);
if (oEn == null) {
throw new MyException("不存在");
}
${className}OnlyResp vo = new ${className}OnlyResp();
BeanUtils.copyProperties(oEn, vo);
return vo;
}

public ${className}QueryResp findAll(${className}QueryRequest request) {
${className}Entity entity = new ${className}Entity();
BeanUtils.copyProperties(request, entity);

Page page = PageHelper.startPage(request.getPageNum(), request.getPageSize());
List<${className}Entity> list = this.${entityName}Dao.findAll(entity);
    List<${className}Vo> records = list.stream().map(x -> {
        ${className}Vo vo = new ${className}Vo();
        BeanUtils.copyProperties(x, vo);
        return vo;
        }).collect(Collectors.toList());

        ${className}QueryResp resp = new ${className}QueryResp.${className}QueryRespBuilder().records(records).build();
        resp.setTotalCount(page.getTotal());
        return resp;
        }

}
